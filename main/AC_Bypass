local AC_BypassLibrary = {}

local ProtectedGUI = gethui or gethiddenui or get_hidden_ui or get_hui or get_h_ui or function()
    return (cloneref(game:GetService("CoreGui")) or clonereference(game:GetService("CoreGui")))
end

function AC_BypassLibrary:Protect_gui(Instance)
    Instance.Parent = ProtectedGUI
end

local setthreadidentity = setthreadidentity or set_thread_identity
local getgc = getgc or get_gc
local hookfunction = hookfunction or hook_function

function AC_BypassLibrary:AC_Bypass()
-- Dan FFA bypass
if tostring(game.GameId) == "7381526759" then
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):Destroy()
end
-- Adonis bypass
local getinfo = getinfo or debug.getinfo
local Hooked = {}
local Detected, Kill
setthreadidentity(2)
for i, v in getgc(true) do
    if typeof(v) == "table" then
        local DetectFunc = rawget(v, "Detected")
        local KillFunc = rawget(v, "Kill")
        if not DetectFunc or not KillFunc or (not DetectFunc and not KillFunc) then return end
    
        if typeof(DetectFunc) == "function" and not Detected then
            Detected = DetectFunc
            
            local Old; Old = hookfunction(Detected, function(Action, Info, NoCrash)
                if Action ~= "_" then
                        warn(`Adonis AntiCheat flagged\nMethod: {Action}\nInfo: {Info}`)
                end
                
                return true
            end)
            table.insert(Hooked, Detected)
        end

        if rawget(v, "Variables") and rawget(v, "Process") and typeof(KillFunc) == "function" and not Kill then
            Kill = KillFunc
            local Old; Old = hookfunction(Kill, function(Info)
                    warn(`Adonis AntiCheat tried to kill (fallback): {Info}`)
            end)
            table.insert(Hooked, Kill)
        end
    end
end

local Old; Old = hookfunction(getrenv().debug.info, newcclosure(function(...)
    local LevelOrFunc, Info = ...

    if Detected and LevelOrFunc == Detected then
            warn(`Adonis AntiCheat sanity check detected and broken`)
        return coroutine.yield(coroutine.running())
    end
    
    return Old(...)
end))
setthreadidentity(7)
end

return AC_BypassLibrary
