local Library = {}

local Connections = {z}
local Unloaded = false

function Library:Unload()
    Unloaded = true
    for i,Connection in pairs(Connections) do
        if Connection then
            Connection:Disconnect()
            Connection = nil
        end
    end
end

function Library:Load()
    local cloneref = cloneref or clone_ref or clonereference or clone_reference or function(...)
        return ...
    end
    local LocalizationService = cloneref(game:GetService("LocalizationService"))
    for i,Child in ipairs(LocalizationService:GetChildren()) do
        Child:Destroy()
    end
    table.insert(Connections,LocalizationService.DescendantAdded:Connect(function(Child)
        Child:Destroy()
    end))
    local hookfunction = hookfunction or hook_function or replaceclosure
    if not hookfunction then
        return
    end
    task.spawn(function()
        local function CoreGui()
            return cloneref(game:GetService("CoreGui"))
        end
        local ContentProvider = game:GetService("ContentProvider")
        local CoreGuiTable = {}
        ContentProvider:PreloadAsync({CoreGui()}, function(assetId)
            if not assetId:find("rbxassetid://") then
                table.insert(CoreGuiTable, assetId)
            end
        end)
        local GameTable = {}
        for i, v in pairs(game:GetDescendants()) do
            if v:IsA("ImageLabel") then
                if v.Image:find('rbxassetid://') and v:IsDescendantOf(CoreGui()) then
                    return
                end
                table.insert(GameTable, v.Image)
            end
        end
        local function RandomizeTable(t)
            local n = #t
            while n > 0 do
                local k = math.random(n)
                t[n], t[k] = t[k], t[n]
                n = n - 1
                if Unloaded then
                    break
                end
            end
            return t
        end
        local PreloadBypass; PreloadBypass = hookfunction(ContentProvider.PreloadAsync, function(a, b, c)
            if not (checkcaller or check_caller)() then
                if typeof(a) == "Instance" and tostring(a) == "ContentProvider" and typeof(b) == "table" then
                    if (table.find(b, CoreGui) or table.find(b, game)) and not (table.find(b, true) or table.find(b, false)) then
                        return PreloadBypass(a, RandomizeTable(CoreGuiTable), c)
                    end
                end
            end
            return PreloadBypass(a, b, c)
        end)
    end)
    task.spawn(function()
        local RunService = cloneref(game:GetService("RunService"))
        local getrenv = getrenv or get_renv or getrobloxenvironment or get_roblox_environment or get_robloxenvironment or getroblox_environment or getfenv or get_fenv
        if not getrenv then
            return
        end
        local Amplitude = 200
        local RandomValue = {-200, 200}
        local RandomTime = {0.1, 1}

        local cos = math.cos
        local acos = math.acos
        local pi = math.pi

        local Maxima = 0
        while task.wait() do
            if gcinfo() >= Maxima then
                Maxima = gcinfo()
            else
                break
            end
        end

        task.wait(0.3)

        local OldGcInfo = gcinfo() + Amplitude
        local tick = 0

        local function getreturn()
            return math.floor(OldGcInfo + ((acos(cos(pi * (tick)))/pi * (Amplitude * 2)) + -Amplitude))
        end
        hookfunction(getrenv().gcinfo, function(...)
            return getreturn();
        end)
        local Old2; Old2 = hookfunction(getrenv().collectgarbage, function(arg, ...)
            local succ,err = pcall(Old2, arg, ...)
            if succ and arg == "count" then
                return getreturn();
            end
            return Old2(arg, ...);
        end)
        table.insert(Connections,RunService.RenderStepped:Connect(function()
            local Formula = ((acos(cos(pi * (tick)))/pi * (Amplitude * 2)) + -Amplitude )
            if Formula > ((acos(cos(pi * (tick) + 0.01))/pi * (Amplitude * 2)) + -Amplitude ) then
                tick = tick + 0.07
            else
                tick = tick + 0.01
            end
        end))

        local old1 = Amplitude
        for i,v in next, RandomTime do
            RandomTime[i] = v * 10000
        end

        local RandomTimeValue = math.random(RandomTime[1], RandomTime[2])/10000
        while task.wait(RandomTime) do
            Amplitude = math.random(old1 + RandomValue[1], old1 + RandomValue[2])
            RandomTimeValue = math.random(RandomTime[1], RandomTime[2])/10000
            if Unloaded then
                break
            end
        end
    end)
end

return Library
